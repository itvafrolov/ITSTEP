
    class Child:ICloneable
    {
        public string Name { get; set; }
        public int Age { get; set; }

        public object Clone()
        {
            return this.MemberwiseClone();
        }

        public override string ToString()
        {
            return $"{Name} {Age}";
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Child child1 = new Child { Name = "Arthur", Age = 13 };
            Child child2 = child1.Clone() as Child;

            Console.WriteLine(child1);
            Console.WriteLine(child2);

            Console.WriteLine("\n++++++++++++++++++++++++++++++++++++\n");
            child2.Age = 14;
            child2.Name = "Bob";

            Console.WriteLine(child1);
            Console.WriteLine(child2);

            Console.ReadKey();
        }
    }

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

using System;
using System.Collections;
using System.Collections.Generic;

namespace ConsoleCS
{
    class StudentCard
    {
        public int Number { get; set; }
        public string Series { get; set; }

        public override string ToString()
        {
            return $"Студенческий билет: {Series} {Number}";
        }
    }

    class Student : IComparable, ICloneable
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public DateTime BirthDate { get; set; }
        public StudentCard StudentCard { get; set; }

        public object Clone()
        {
            //return MemberwiseClone(); // shallow

            // deep
            Student temp = MemberwiseClone() as Student;
            temp.StudentCard = new StudentCard
            {
                Number = this.StudentCard.Number,
                Series = StudentCard.Series
            };
            return temp;
        }

        public int CompareTo(object obj)
        {
            if (obj is Student)
            {
                return LastName.CompareTo((obj as Student).LastName);
            }
            throw new ArgumentException();
        }

        public override string ToString()
        {
            return $"Фамилия: {LastName}, Имя: {FirstName}, Родился: {BirthDate.ToLongDateString()}, {StudentCard}";
        }
    }

    class Auditory : IEnumerable
    {
        private Student[] _students =
            {
        new Student {
            FirstName ="John",
            LastName ="Miller",
            BirthDate =new DateTime(1997,3,12),
            StudentCard =new StudentCard { Number=189356, Series="AB" }
        },
        new Student {
            FirstName ="Candice",
            LastName ="Leman",
            BirthDate =new DateTime(1998,7,22),
            StudentCard =new StudentCard { Number=345185, Series="XA" }
        },
        new Student {
            FirstName ="Joey",
            LastName ="Finch",
            BirthDate =new DateTime(1996,11,30),
            StudentCard =new StudentCard { Number=258322, Series="AA" }
        },
        new Student {
            FirstName ="Nicole",
            LastName ="Taylor",
            BirthDate =new DateTime(1996,5,10),
            StudentCard =new StudentCard { Number=513484, Series="AA" }
        }
    };

        public Student this[int index]
        {
            get
            {
                if (index>=0 && index<_students.Length)
                {
                    return _students[index];
                }
                throw new IndexOutOfRangeException();
            }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _students.GetEnumerator();
        }

        public void Sort()
        {
            Array.Sort(_students);
        }

        public void Sort(IComparer comparer)
        {
            Array.Sort(_students, comparer);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Auditory auditory = new Auditory();

            //auditory.GetEnumerator(); error

            //auditory.Sort();

            //IComparer comparer = new DateComparer();
            //auditory.Sort(comparer);

            //auditory.Sort(new DateComparer());

            //foreach (Student item in auditory)
            //{
            //    Console.WriteLine(item);
            //}

            Student student = auditory[0].Clone() as Student;

            Console.WriteLine(auditory[0]);
            Console.WriteLine(student);

            Console.WriteLine("\n+++++++++++++++++++++++++++++++++\n");

            student.LastName = "Doe";
            student.StudentCard.Number = 777777;
            student.StudentCard.Series = "ZZ";

            Console.WriteLine(auditory[0]);
            Console.WriteLine(student);

            Console.ReadKey();
        }
    }

    internal class DateComparer : IComparer
    {
        int IComparer.Compare(object x, object y)
        {
            if (x is Student && y is Student)
            {
                return DateTime.Compare((x as Student).BirthDate, (y as Student).BirthDate);
            }
            throw new ArgumentException();
        }
    }
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    class FinalizeExample
    {
        ~FinalizeExample()
        {
            Console.WriteLine("FinalizeExample");
        }
    }
    class DisposeExample : IDisposable
    {
        //public void Dispose()
        //{
        //    Console.WriteLine("DisposeExample");
        //}

        #region IDisposable Support
        private bool disposedValue = false; // To detect redundant calls

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // TODO: dispose managed state (managed objects).
                    Console.WriteLine("DisposeExample");
                }

                // TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.
                // TODO: set large fields to null.

                disposedValue = true;
            }
        }

        // TODO: override a finalizer only if Dispose(bool disposing) above has code to free unmanaged resources.
        //~DisposeExample()
        //{
        //    // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
        //    Dispose(false);
        //}

        // This code added to correctly implement the disposable pattern.
        public void Dispose()
        {
            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
            Dispose(true);
            // TODO: uncomment the following line if the finalizer is overridden above.
             //GC.SuppressFinalize(this);
        }
        #endregion
    }
    class Program
    {
        public static void M1()
        {
            DisposeExample disposeExample = new DisposeExample();
            try
            {
                // TODO: ...
                throw new Exception();
            }
            //catch(Exception ex)
            //{
            //    Console.WriteLine(ex.Message);
            //}
            finally
            {
                disposeExample.Dispose();
            }
        }

        public static void M2()
        {
            using (DisposeExample example = new DisposeExample())
            {
                // TODO: ...
                throw new Exception();
            }
        }

        static void Main(string[] args)
        {
            //FinalizeExample finalizeExample = new FinalizeExample();

            try
            {
                M1();
                M2();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

            Console.ReadKey();
        }
    }