
    class GarbageHelper
    {
        class Person
        {
            string _name;
            int _age;
            // ...
        }
        public void MakeGarbage()
        {
            for (int i = 0; i < 1000; i++)
            {
                Person p = new Person();
            }
        }

    }
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(GC.MaxGeneration);

            GarbageHelper garbage = new GarbageHelper();

            Console.WriteLine(GC.GetGeneration(garbage)); // 0
            Console.WriteLine(GC.GetTotalMemory(false));

            garbage.MakeGarbage();

            Console.WriteLine(GC.GetTotalMemory(false));

            GC.Collect(0);

            Console.WriteLine(GC.GetGeneration(garbage)); // 1
            Console.WriteLine(GC.GetTotalMemory(false));

            GC.Collect();

            Console.WriteLine(GC.GetGeneration(garbage)); // 2
            Console.WriteLine(GC.GetTotalMemory(false));

            Console.ReadKey();
        }
    }

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    class Point
    {
        public int X { get; set; }
        public int Y { get; set; }

        // унарные
        public static Point operator ++(Point p)
        {
            p.X++;
            p.Y++;
            return p;
        }
        public static Point operator --(Point p)
        {
            p.X--;
            p.Y--;
            return p;
        }
        public static Point operator -(Point p)
        {
            //return new Point { X = -p.X, Y = -p.Y };
            p.X *= -1;
            p.Y *= -1;
            return p;
        }

        public override string ToString()
        {
            return $"Point: X = {X}, Y = {Y}";
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Point point = new Point { X = 10, Y = 10 };

            Console.WriteLine(point++);
            Console.WriteLine(++point);
            Console.WriteLine(point--);

            Console.WriteLine(-point);

            Console.ReadKey();
        }
    }

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


    class Point
    {
        public int X { get; set; }
        public int Y { get; set; }       

        public override string ToString()
        {
            return $"Point: X = {X}, Y = {Y}";
        }
    }

    class Vector
    {
        public int X { get; set; }
        public int Y { get; set; }

        public Vector() { }

        public Vector(Point begin, Point end)
        {
            X = end.X - begin.X;
            Y = end.Y - begin.Y;
        }

        public static Vector operator +(Vector v1, Vector v2)
        {
            return new Vector
            {
                X = v1.X + v2.X,
                Y = v1.Y + v2.Y
            };
        }

        public static Vector operator -(Vector v1, Vector v2)
        {
            return new Vector
            {
                X = v1.X - v2.X,
                Y = v1.Y - v2.Y
            };
        }
        
        public static Vector operator *(Vector v, int n)
        {
            v.X *= n;
            v.Y *= n;
            return v;
        }

        public override string ToString()
        {
            return $"Vector: X = {X}, Y = {Y}";
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Point p1 = new Point { X = 5, Y = 8 };
            Point p2 = new Point { X = 10, Y = 3 };

            Vector v1 = new Vector(p1, p2);
            Console.WriteLine(v1);

            Vector v2 = new Vector
            {
                X = 7,
                Y = 9
            };

            Console.WriteLine(v1+v2);
            Console.WriteLine(v1-v2);
            int n = 5;
            v1 *= n;
            Console.WriteLine(v1);
            //Console.WriteLine(n*v2); error

            Console.ReadKey();
        }
    }

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

using static System.Console;

namespace SimpleProject
{
    class CPoint
    {
        public int X { get; set; }
        public int Y { get; set; }
    }
    struct SPoint
    {
        public int X { get; set; }
        public int Y { get; set; }
    }
    class Program
    {
        static void Main()
        {
            // работа метода ReferenceEquals со ссылочными и значимыми типами

            //ссылочный тип
            CPoint cp = new CPoint { X = 10, Y = 10 };
            CPoint cp1 = new CPoint { X = 10, Y = 10 };
            CPoint cp2 = cp1;

            // хотя cp и cp1 содержат одинаковые значения, они указывают на разные адреса памяти
            WriteLine($"ReferenceEquals(cp, cp1) = {ReferenceEquals(cp, cp1)}"); // false

            // cp1 и cp2 указывают на один и тот же адрес памяти
            WriteLine($"ReferenceEquals(cp1, cp2) = {ReferenceEquals(cp1, cp2)}"); // true

            // значимый тип
            SPoint sp = new SPoint { X = 10, Y = 10 };

            // при передаче в метод ReferenceEquals выполняется упаковка,
            // упакованные объекты располагаются по разным адресам
            WriteLine($"ReferenceEquals(sp, sp) = {ReferenceEquals(sp, sp)}"); // false

            // работа метода Equals со ссылочными и значимыми типами
            
            //выполняется сравнение адресов ссылочных типов
            WriteLine($"Equals(cp, cp1) = {Equals(cp, cp1)}"); // false

            // значимый тип
            SPoint sp1 = new SPoint { X = 10, Y = 10 };

            // выполняется сравнение значений полей
            WriteLine($"Equals(sp, sp1) = {Equals(sp, sp1)}"); // true
        }
    }
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    class Point
    {
        public int X { get; set; }
        public int Y { get; set; }

        public override bool Equals(object obj)
        {
            return this.ToString() == obj.ToString();
        }

        public override int GetHashCode()
        {
            return ToString().GetHashCode();
        }

        public static bool operator ==(Point p1, Point p2)
        {
            return p1.Equals(p2);
        }

        public static bool operator !=(Point p1, Point p2)
        {
            return !(p1 == p2);
        }

        public static bool operator >(Point p1, Point p2)
        {
            return Math.Sqrt(p1.X * p1.X + p1.Y * p1.Y) > Math.Sqrt(p2.X * p2.X + p2.Y * p2.Y);
        }

        public static bool operator <(Point p1, Point p2)
        {
            return (p1.X * p1.X + p1.Y * p1.Y) < (p2.X * p2.X + p2.Y * p2.Y);
        }

        public override string ToString()
        {
            return $"Point: X = {X}, Y = {Y}";
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            //int number = 45;

            //object obj = number; // boxing

            //int n1 = (int)obj; // unboxing

            Point p1 = new Point { X = 5, Y = 8 };
            Point p2 = new Point { X = 10, Y = 3 };

            Console.WriteLine(p1 == p2); // False
            Console.WriteLine(p1 != p2); // True

            Console.WriteLine(p1 > p2);
            Console.WriteLine(p1 < p2);

            Console.ReadKey();
        }
    }