
    class Human
    {
        protected string firstName;
        protected string lastName;

        protected internal DateTime BirthDate { get; set; }

        public Human()
        {
            BirthDate = new DateTime(2000, 10, 10);
        }

        public Human(string fN, string lN) : this()
        {
            firstName = fN;
            lastName = lN;
        }
        //public Human(string fName) : this()
        //{
        //    //
        //}

        public void Print()
        {
            Console.Write($"{firstName} {lastName}");
        }
    }
    class Employee : Human
    {
        private double _salary;

        public Employee(string fName, string lName, double salary) : base(fName, lName)
        {
            _salary = salary;
        }

        public void AddSalary(double salary)
        {
            _salary = salary;
        }
    
        public new void Print()
        {
            base.Print();
            Console.WriteLine($" {_salary}");
        }
    }

    /*sealed class Curator
    {
        // ...
    }

    class Teacher:Curator
    {

    }*/
    
    class Program
    {
        static void Main(string[] args)
        {
            Employee employee = new Employee("John", "Doe", 2384.79);

            employee.BirthDate = new DateTime(2000,10,12);

            employee.Print();

            Human human = new Employee("Jack", "Daniels", 4293.12);
            //human.AddSalary(238.4);

            // 1
            try
            {
                ((Employee)human).AddSalary(786);
            }
            catch { }

            // 2 - as
            Employee empl = human as Employee;
            if (empl != null)
            {
                empl.AddSalary(237.56);
            }

            // 3 - is
            if (human is Employee)
            {
                (human as Employee).AddSalary(675.12);
                (human as Employee).Print();
            }

            Console.ReadKey();
        }
    }

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

using static System.Console;

....


    public class Human
    {
        string _firstName;
        string _lastName;
        DateTime _birthDate;

        public Human(string fName, string lName)
        {
            _firstName = fName;
            _lastName = lName;
        }

        public Human(string fName, string lName, DateTime date)
        {
            _firstName = fName;
            _lastName = lName;
            _birthDate = date;
        }

        public void Show()
        {
            WriteLine($"\nФамилия: {_lastName}\nИмя: {_firstName}\nДата рождения: {_birthDate.ToShortDateString()}");
        }
    }

    public class Employee : Human
    {
        double _salary;
        public Employee(string fName, string lName) : base(fName, lName) { }

        public Employee(string fName, string lName, double salary)
            : base(fName, lName)
        {
            _salary = salary;
        }
        public Employee(string fName, string lName, DateTime date, double salary) : base(fName, lName, date)
        {
            _salary = salary;
        }

        public void Print()
        {
            Show();
            WriteLine($"Заработная плата: {_salary} $");
        }
    }
    class Manager : Employee
    {
        string _fieldActivity;

        public Manager(string fName, string lName, DateTime date, double salary,string activity) : base(fName, lName, date,salary)
        {
            _fieldActivity = activity;
        }

        public void ShowManager()
        {
            WriteLine($"Менеджер. Сфера деятельности: {_fieldActivity}");
        }
    }
    class Scientist : Employee
    {
        string _scientificDirection;
        public Scientist(string fName, string lName, DateTime date, double salary, string direction) : base(fName, lName, date, salary)
        {
            _scientificDirection = direction;
        }
        public void ShowScientist()
        {
            WriteLine($"Ученый. Научное направление: {_scientificDirection}");
        }
    }
    class Specialist : Employee
    {
        string _qualification;
        public Specialist(string fName, string lName, DateTime date, double salary, string qualification) : base(fName, lName, date, salary)
        {
            _qualification = qualification;
        }
        public void ShowSpecialist()
        {
            WriteLine($"Специалист. Квалификация: {_qualification}");
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Employee manager = new Manager("John", "Doe", new DateTime(1995,7,23), 3500, "продукты питания");

            Employee[] employees = {
              manager,
              new Scientist("Jim", "Beam", new DateTime(1956,3,15), 4253, "история"),
              new Specialist("Jack", "Smith", new DateTime(1996,11,5), 2587.43,"физика")
            };

            foreach (Employee item in employees)
            {
                item.Print();
                //item.ShowScientist(); Error

                try
                {
                    ((Specialist)item).ShowSpecialist(); // Способ №1
                }
                catch
                {
                }

                Scientist scientist = item as Scientist; // Способ №2

                if (scientist != null)
                {
                    scientist.ShowScientist();
                }

                if (item is Manager) // Способ №3
                {
                    (item as Manager).ShowManager();
                }
            }
        }
    }

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


using System;
using static System.Console;

namespace SimpleProject
{
    public class Human
    {
        string _firstName;
        string _lastName;
        DateTime _birthDate;

        public Human(string fName, string lName, DateTime date)
        {
            _firstName = fName;
            _lastName = lName;
            _birthDate = date;
        }
        public virtual void Print()
        {
            WriteLine($"\nФамилия: {_lastName}\nИмя: {_firstName}\nДата рождения: {_birthDate.ToLongDateString()}");
        }
    }

    public class Employee : Human
    {
        double _salary;

        public Employee(string fName, string lName, DateTime date, double salary) : base(fName, lName, date)
        {
            _salary = salary;
        }

        public override void Print()
        {
            base.Print();
            WriteLine($"Заработная плата: {_salary} $");
        }
    }

    class Manager : Employee
    { 
        string _fieldActivity;

        public Manager(string fName, string lName, DateTime date, double salary, string activity) : base(fName, lName, date, salary)
        {
            _fieldActivity = activity;
        }

        public override void Print()
        {
            Write($"\nМенеджер. Сфера деятельности: {_fieldActivity}");
            base.Print();
        }
    }
    class Scientist : Employee
    {
        string _scientificDirection;
        public Scientist(string fName, string lName, DateTime date, double salary, string direction) : base(fName, lName, date, salary)
        {
            _scientificDirection = direction;
        }
        public override void Print()
        {
            Write($"\nУченый. Научное направление: {_scientificDirection}");
            base.Print();
        }
    }
    class Specialist : Employee
    {
        string _qualification;
        public Specialist(string fName, string lName, DateTime date, double salary, string qualification) : base(fName, lName, date, salary)
        {
            _qualification = qualification;
        }
        public override void Print()
        {
            Write($"\nСпециалист. Квалификация: {_qualification}");
            base.Print();
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Human[] people = {
              new Manager("John", "Doe", new DateTime(1995,7,23), 3500, "продукты питания"),
              new Scientist("Jim", "Beam", new DateTime(1956,3,15), 4253, "история"),
              new Specialist("Jack", "Smith", new DateTime(1996,11,5), 2587.43,"физика")
            };

            foreach (Human item in people)
            {
                item.Print(); // полиморфизм
            }
        }
    }
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

using System;
using static System.Console;

namespace ConsoleCS
{
    public class Human
    {
        string _firstName;
        string _lastName;
        DateTime _birthDate;

        public Human(string fName, string lName, DateTime date)
        {
            _firstName = fName;
            _lastName = lName;
            _birthDate = date;
        }
        public virtual void Print()
        {
            WriteLine($"\nФамилия: {_lastName}\nИмя: {_firstName}\nДата рождения: {_birthDate.ToLongDateString()}");
        }

        public override string ToString()
        {
            return $"\nФамилия: {_lastName}\nИмя: {_firstName}\nДата рождения: {_birthDate.ToLongDateString()}";
        }
    }

    public class Employee : Human
    {
        double _salary;

        public Employee(string fName, string lName, DateTime date, double salary) : base(fName, lName, date)
        {
            _salary = salary;
        }

        public override void Print()
        {
            base.Print();
            WriteLine($"Заработная плата: {_salary} $");
        }
        public override string ToString()
        {
            return $"{base.ToString()} Заработная плата: {_salary} $";
        }
    }

    class Manager : Employee
    {
        string _fieldActivity;

        public Manager(string fName, string lName, DateTime date, double salary, string activity) : base(fName, lName, date, salary)
        {
            _fieldActivity = activity;
        }

        public override void Print()
        {
            Write($"\nМенеджер. Сфера деятельности: {_fieldActivity}");
            base.Print();
        }
        public override string ToString()
        {
            return $"{base.ToString()} \nМенеджер. Сфера деятельности: {_fieldActivity}";
        }
    }
    class Scientist : Employee
    {
        string _scientificDirection;
        public Scientist(string fName, string lName, DateTime date, double salary, string direction) : base(fName, lName, date, salary)
        {
            _scientificDirection = direction;
        }
        public override void Print()
        {
            Write($"\nУченый. Научное направление: {_scientificDirection}");
            base.Print();
        }
        public override string ToString()
        {
            return $"{base.ToString()}\nУченый. Научное направление: {_scientificDirection}";
        }
    }
    class Specialist : Employee
    {
        string _qualification;
        public Specialist(string fName, string lName, DateTime date, double salary, string qualification) : base(fName, lName, date, salary)
        {
            _qualification = qualification;
        }
        public override void Print()
        {
            Write($"\nСпециалист. Квалификация: {_qualification}");
            base.Print();
        }
        public override string ToString()
        {
            return $"{base.ToString()}\nСпециалист. Квалификация: {_qualification}";
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Human[] people = {
              new Manager("John", "Doe", new DateTime(1995,7,23), 3500, "продукты питания"),
              new Scientist("Jim", "Beam", new DateTime(1956,3,15), 4253, "история"),
              new Specialist("Jack", "Smith", new DateTime(1996,11,5), 2587.43,"физика")
            };

            foreach (Human item in people)
            {
                item.Print(); // полиморфизм
            }

            WriteLine("\n+++++++++++++++++++++++++++\n");

            foreach (Human item in people)
            {
                WriteLine(item); // полиморфизм
            }
        }
    }
}
