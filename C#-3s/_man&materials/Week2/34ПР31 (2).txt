
        // Перечисления

        enum CommodityType
        {
            FrozenFood = 1, Food, DomesticChemistry, BuildingMaterials, Petrol
        }

        enum TransportType
        {
            Semitrailer = 1, Coupling, Refrigerator, OpenSideTruck, FuelTruck
        }

        static void Main(string[] args)
        {

            foreach (int item in Enum.GetValues(typeof(CommodityType)))
            {
                Console.WriteLine($"{item}. {Enum.GetName(typeof(CommodityType),item)}");
            }

            //foreach (string item in Enum.GetNames(typeof(CommodityType)))
            //{
            //    Console.WriteLine(item);
            //}

            Console.Write("\nInput number from 1 to 5: ");
            int number = int.Parse(Console.ReadLine());

            if (number>0&&number<6)
            {
                CommodityType commodity = (CommodityType)Enum.GetValues(typeof(CommodityType)).GetValue(number - 1);
                //CommodityType commodity = (CommodityType)Enum.ToObject(typeof(CommodityType), number);

                TransportType transport = TransportType.Coupling;

                switch (commodity)
                {
                    case CommodityType.FrozenFood:
                        transport = TransportType.Refrigerator;
                        break;
                    case CommodityType.Food:
                        transport = TransportType.Semitrailer;
                        break;
                    case CommodityType.DomesticChemistry:
                        transport = TransportType.Coupling;
                        break;
                    case CommodityType.BuildingMaterials:
                        transport = TransportType.OpenSideTruck;
                        break;
                    case CommodityType.Petrol:
                        transport = TransportType.FuelTruck;
                        break;
                }

                Console.WriteLine($"{commodity} -> {transport}");
            }
            else
            {
                Console.WriteLine("Error!");
            }

            Console.ReadKey();
        }

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        enum DistanceSun : ulong
        {
            Sun = 0,
            Mercury = 57900000,
            Venus = 108200000,
            Earth = 149600000,
            Mars = 227900000,
            Jupiter = 7783000000,
            Saturn = 1427000000,
            Uranus = 2870000000,
            Neptune = 4496000000
        }

        static void Main(string[] args)
        {
            string moon = "Moon";

            if (!Enum.IsDefined(typeof(DistanceSun), moon))
            {
                Console.WriteLine($"{moon} dosn't in the {typeof(DistanceSun).Name}.\n");
                //Console.WriteLine($"{moon} dosn't in the DistanceSun.\n");
                //Console.WriteLine($"{moon} dosn't in the {nameof(DistanceSun)}.\n");
            }

            foreach (DistanceSun item in Enum.GetValues(typeof(DistanceSun)))
            {
                Console.WriteLine($"{Enum.Format(typeof(DistanceSun), item, "G"),-10} {Enum.Format(typeof(DistanceSun), item, "D"),-10} {Enum.Format(typeof(DistanceSun), item, "X"),20}");
            }

            ulong number = 227900000;
            Console.WriteLine(Enum.GetName(typeof(DistanceSun),number));

            string name = "Saturn";

            //DistanceSun saturn = (DistanceSun)Enum.Parse(typeof(DistanceSun), name);
            //Console.WriteLine(saturn);
            
            number = (ulong)Enum.Parse(typeof(DistanceSun), name);
            Console.WriteLine(number);

            Console.ReadKey();
        }

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        // Структуры

        static void Main(string[] args)
        {
            /*Dimensions dimensions = new Dimensions();
            dimensions.Height = 34;
            dimensions.Show();

            Dimensions dimensions1 = new Dimensions(23.56, 76.112);
            dimensions1.Show();
            
            Size size = new Size();

            MessageBox.Show("Hello");*/

            DateTime dateTime = new DateTime(2000, 5, 28);
            Console.WriteLine(dateTime.ToShortDateString());

            Console.WriteLine(dateTime.Month);
            Console.WriteLine(dateTime.DayOfWeek);
            Console.WriteLine(dateTime.DayOfYear);

            DateTime newDate = dateTime.AddDays(3);
            Console.WriteLine(newDate.ToLongDateString());

            Console.WriteLine(DateTime.DaysInMonth(2020, 5));

            Console.WriteLine(DateTime.Now);
            Console.WriteLine(DateTime.Today);

            const double DaysOfYear = 365.25;

            TimeSpan timeSpan = DateTime.Today - dateTime;

            int age = (int)(timeSpan.TotalDays/DaysOfYear);
            Console.WriteLine(age);

            Console.WriteLine((int)((DateTime.Today - dateTime).TotalDays/DaysOfYear));


            Console.WriteLine((DateTime.Today - dateTime).TotalDays/DaysOfYear);
            Console.WriteLine((DateTime.Now - dateTime).TotalDays/DaysOfYear);

            Console.ReadKey();


// Программа преобразует строку таким образом, что цифры, которые находятся в слове, переносятся в конец строки без изменения порядка следования остальных символов.

    // dfdf45 jhgj2dfhg khjk7hh8hj
    // dfdf jhgjdfhg khjkhhhj45278

            string str, numbers = "";

            //...
            //for
            if (char.IsDigit(str[i])
            {
                numbers += str[i];
                str = str.Remove(i, 1);
            }

            str += numbers;
        }
