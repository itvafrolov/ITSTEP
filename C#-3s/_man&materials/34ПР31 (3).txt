
    interface IFly
    {
        void Fly();
    }
    interface ISwim
    {
        void Swim();
    }
    interface IRun
    {
        void Run(int speed);
    }
    abstract class Bird
    {
        // ...
        //public abstract void Fly();
    }

    class Duck : Bird, IFly, ISwim
    {
        //...

        public void Fly()
        {
            Console.WriteLine("Duck fly");
        }

        public void Swim()
        {
            Console.WriteLine("Duck swim");
        }
    }

    class Penguin : Bird, ISwim
    {
        public void Swim()
        {
            Console.WriteLine("Penguin swim");
        }
    }

    class Ostrich : Bird, IRun
    {
        public void Run(int speed)
        {
            Console.WriteLine($"Ostrich run {speed} km/h");
        }
    }

    abstract class Insect
    {
        // ...
    }

    class Butterfly : Insect, IFly
    {
        // ...
        public void Fly()
        {
            Console.WriteLine("Butterfly fly");
        }

        public void Ex()
        {
            Console.WriteLine("Ex");
        }
    }

    class Plane : IFly
    {
        public void Fly()
        {
            Console.WriteLine("Plane fly");
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            //Bird[] birds = { new Penguin(), new Duck(), new Ostrich() };

            //foreach (Bird item in birds)
            //{
            //    try
            //    {
            //        ((IFly)item).Fly(); // 1
            //    }
            //    catch { }

            //    IFly fly = item as IFly; // 2
            //    if (fly!=null)
            //    {
            //        fly.Fly();
            //    }

            //    if (item is IFly) // 3
            //    {
            //        (item as IFly).Fly();
            //    }
            //}

            //IFly fly = new IFly();
            //IFly fly = new Duck();

            IFly[] flies = { new Butterfly(), new Duck(), new Plane() };
            foreach (IFly item in flies)
            {
                item.Fly(); // полиморфизм
            }

            Butterfly butterfly = (flies[0] as Butterfly);
            if (butterfly!=null)
            {
                butterfly.Ex();
            }

            Console.ReadKey();
        }
    }

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    abstract class Human
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public DateTime BirthDate { get; set; }
        public override string ToString()
        {
            return $"\nФамилия: {LastName} Имя: {FirstName} Дата рождения: {BirthDate.ToLongDateString()}";
        }
    }
    abstract class Employee : Human
    {
        public string Position { get; set; }
        public double Salary { get; set; }

        public override string ToString()
        {
            return base.ToString() + $"\nДолжность: {Position} Заработная плата: {Salary} $";
        }
    }

    interface IWorker
    {
        bool IsWorking { get; }
        string Work();
    }

    interface IManager
    {
        IWorker[] ListOfWorkers { get; set; }
        void Organize();
        void Control();
        void MakeBudget();
    }

    class Director : Employee, IManager
    {
        public IWorker[] ListOfWorkers { get; set; }

        public Director()
        {
            ListOfWorkers = new IWorker[4];
        }

        public void Control()
        {
            Console.WriteLine("Control");
        }

        public void MakeBudget()
        {
            Console.WriteLine("MakeBudget");
        }

        public void Organize()
        {
            Console.WriteLine("Organize");
        }
    }

    class Cashier : Employee, IWorker
    {
        private bool _isWorking;

        public bool IsWorking
        {
            get { return _isWorking; }
        }

        public string Work()
        {
            return "Cashier works";
        }

        public Cashier(bool b)
        {
            _isWorking = b;
        }
    }

    class Loader : Employee, IWorker
    {
        public bool IsWorking { get; }
        public string Work()
        {
            return "Loader works";
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Director director = new Director();

            //director.ListOfWorkers[0] = new Cashier();

            director.ListOfWorkers = new IWorker[] { new Cashier(true), new Loader() };

            foreach (IWorker item in director.ListOfWorkers)
            {
                if (item.IsWorking)
                {
                    Console.WriteLine(item.Work());
                }
            }

            Console.ReadKey();
        }
    }

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

using System;
using static System.Console;

namespace SimpleProject
{
    interface IIndexer
    {
        string this[int index]
        {
            get;
            set;
        }
        string this[string index]
        {
            get;
        }
    }

    enum Numbers { one, two, three, four, five };

    class IndexerClass : IIndexer
    {
        string[] _names = new string[5];

        public string this[int index]
        {
            get
            {
                return _names[index];
            }
            set
            {
                _names[index] = value;
            }
        }

        public string this[string index]
        {
            get
            {
                if (Enum.IsDefined(typeof(Numbers), index))
                    return _names[(int)Enum.Parse(typeof(Numbers), index)];
                else
                    return "";
            }
        }

        public IndexerClass()
        {
            // запись значений, используя индексатор с целочисленным параметром
            this[0] = "Bob";
            this[1] = "Candice";
            this[2] = "Jimmy";
            this[3] = "Joey";
            this[4] = "Nicole";
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            IndexerClass indexerClass = new IndexerClass();

            WriteLine("\t\tВывод значений\n");
            WriteLine("Использование индексатора с целочисленным параметром:");
            for (int i = 0; i < 5; i++)
            {
                WriteLine(indexerClass[i]);
            }

            WriteLine("\nИспользование индексатора со строковым параметром:");
            foreach (string item in Enum.GetNames(typeof(Numbers)))
            {
                WriteLine(indexerClass[item]);
            }
        }
    }
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++