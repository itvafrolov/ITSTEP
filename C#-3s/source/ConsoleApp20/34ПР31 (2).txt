
    interface ISome
    {
        void M();
    }
    public enum Professions { Doctor, Programmer, Tester, Engineer, Teacher }
    class Student : ISome
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public bool IsMarried { get; set; }
        public Professions Profession { get; set; }
        public byte[] Marks { get; set; }

        public decimal GetAverage()
        {
            double aver = 0;
            foreach (var v in Marks)
                aver += v;
            return (decimal)aver / Marks.Length;
        }

        public override string ToString()
        {
            return $"Name: {Name}, age: {Age}, profession: {Profession}, isMarried: {IsMarried}, marksAverage: {Math.Round(GetAverage(), 2)}";
        }

        public void M()
        {
            Console.WriteLine("Hello");
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            List<Student> students = new List<Student>
            {
                new Student{ Name = "Nastya", Age = 30, IsMarried = true, Profession = Professions.Teacher, Marks = new byte[]{10,8,7,11,3,8,11,12}},
                  new Student{ Name = "Nastya", Age = 23, IsMarried = false, Profession = Professions.Engineer, Marks = new byte[]{10,5,7,11,3,8,9,6}},
                new Student {Name = "Ira", Age = 18, IsMarried = false, Profession = Professions.Doctor, Marks = new byte[]{6,8,7,2,3,8,6,3}},
                new Student { Name = "Dima", Age = 34, IsMarried = true, Profession = Professions.Programmer, Marks = new byte[]{10,12,12,11,12,12,11,12}},
                 new Student { Name = "Timur", Age = 25, IsMarried = false, Profession = Professions.Tester, Marks = new byte[]{7,8,7,7,7,8,7,7}},
                  new Student { Name = "Kolya", Age = 23, IsMarried = true, Profession = Professions.Doctor, Marks = new byte[]{5,5,5,3,3,5,5,5}},
                  new Student { Name = "Oleg", Age = 31, IsMarried = true, Profession = Professions.Tester, Marks = new byte[]{6,9,9,7,9,8,9,9}},
                  new Student { Name = "Sergey", Age = 29, IsMarried = true, Profession = Professions.Programmer, Marks = new byte[]{11,11,11,11,11,8,11,11}}
            };

            foreach (var item in students)
            {
                Console.WriteLine(item);
            }

            Console.WriteLine("\n+++++++++++++++++++++++++++++++++++++++\n");

            // вывести первого студента по заданному имени и возрасту (First, Find)
            /*var query = students.Find(s => s.Name == "Oleg" && s.Age == 31);
            if (query!=null)
            {
                Console.WriteLine(query);
            }*/

            // вывести всех студентов в возрасте от 24 до 30 (Where, FindAll)
            /*//var query = students.Where(s => s.Age >= 24 && s.Age <= 30);
            var query = students.FindAll(s => s.Age >= 24 && s.Age <= 30);

            foreach (var item in query)
            {
                Console.WriteLine(item);
            }*/

            // All() - проверка, удовлетвор€ют ли все элементы коллекции заданному условию
            //Console.WriteLine(students.All(s=>s.Name=="Dima"));

            // Any() - проверка, удовлетвор€ет ли хот€ бы один элемент коллекции заданному условию
            //Console.WriteLine(students.Any(s=>s.Name=="Dima"));

            // выбрать всех студентов по профессии тестировщик, у кого оценки не ниже 7 баллов и отсортировать в обратном пор€дке по имени
            /*var query = students.Where(p => p.Profession == Professions.Tester && p.Marks.All(m => m >= 7)).OrderByDescending(p => p.Name);
            foreach (var item in query)
            {
                Console.WriteLine(item);
            }*/

            // преобразование коллекции к IEnumerable<>
            /*IEnumerable<ISome> somes = students.Cast<ISome>();
            foreach (var item in somes)
            {
                item.M();
            }*/
            List<Student> students1 = new List<Student>
            {
                new Student{ Name = "Roma", Age = 30, IsMarried = true, Profession = Professions.Teacher, Marks = new byte[]{10,8,7,11,3,8,11,12}},
                new Student {Name = "Garic", Age = 18, IsMarried = false, Profession = Professions.Doctor, Marks = new byte[]{6,8,7,2,3,8,6,3}},
                new Student { Name = "Lyosha", Age = 34, IsMarried = true, Profession = Professions.Programmer, Marks = new byte[]{10,12,12,11,12,12,11,12}},
                 new Student { Name = "Timur", Age = 25, IsMarried = false, Profession = Professions.Tester, Marks = new byte[]{7,8,7,7,7,8,7,7}},
                  new Student { Name = "Tom", Age = 23, IsMarried = true, Profession = Professions.Doctor, Marks = new byte[]{5,5,5,3,3,5,5,5}},
                  new Student { Name = "Oleg", Age = 31, IsMarried = true, Profession = Professions.Tester, Marks = new byte[]{9,9,9,7,9,8,9,9}},
                  new Student { Name = "Sergey", Age = 29, IsMarried = true, Profession = Professions.Programmer, Marks = new byte[]{11,11,11,11,11,8,11,11}}
            };

            foreach (var item in students1)
            {
                Console.WriteLine(item);
            }

            // объединение двух коллекций
            /*var concat = students.Concat(students1);
            foreach (var item in concat)
            {
                Console.WriteLine(item);
            }*/
            Console.WriteLine("\n+++++++++++++++++++++++++++++++++++++++++++++\n");

            // количество записей общее / по условию
            /*Console.WriteLine(concat.Count());
            Console.WriteLine(concat.Count(s=>s.IsMarried));*/

            // убирает повтор€ющиес€ элементы из последовательности
            /*IEqualityComparer<Student> comparer = new StudentComparer();
            var distinct = concat.Distinct(comparer);
            //var distinct = concat.Distinct(new StudentComparer());
            foreach (var item in distinct)
            {
                Console.WriteLine(item);
            }*/

            /*
            // Except() возвращает все элементы первой последовательности, которых нет во второй
            //var query = students.Except(students1, new StudentComparer());

            // Intersect() - все элементы общие дл€ двух последовательностей
            var query = students.Intersect(students1, new StudentComparer());

            foreach (var item in query)
            {
                Console.WriteLine(item);
            }*/

            // элемент по указанному индексу
            /*Console.WriteLine(students.ElementAt(2));
            Student st = students.ElementAtOrDefault(12);
            if (st!=null)
            {
                Console.WriteLine(st);
            }*/

            // первый элемент, который удовлетвор€ет условию
            /*Console.WriteLine(students.First(s=>s.Age==29));
            Student st = students.FirstOrDefault(s => s.Age == 65);
            if (st!=null)
            {
                Console.WriteLine(st);
            }*/

            // возвращает элементы, сгруппированные по заданному признаку
            var query = students.GroupBy(s => s.Profession);

            foreach (var group in query)
            {
                Console.WriteLine($"Key: {group.Key} Count: {group.Count()}");
                foreach (var item in group)
                {
                    Console.WriteLine($"\t{item}");
                }
                Console.WriteLine();                
            }

            Console.ReadKey();
        }
    }

    class StudentComparer : IEqualityComparer<Student>
    {
        bool IEqualityComparer<Student>.Equals(Student x, Student y)
        {
            return x.ToString() == y.ToString();
        }

        int IEqualityComparer<Student>.GetHashCode(Student obj)
        {
            return obj.ToString().GetHashCode();
        }
    }

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        // XML - eXtensible Markup Language
        // DOM - Document Object Model -> W3C
        // SAX - Simple API for XML

        static void Main(string[] args)
        {
            XmlTextWriter writer = null;

            try
            {
                writer = new XmlTextWriter("Cars.xml", Encoding.Unicode)
                {
                    Formatting = Formatting.Indented/*,
                    Indentation = 2,
                    IndentChar = '+'*/
                };
                writer.WriteStartDocument();

                writer.WriteStartElement("Cars");

                writer.WriteStartElement("Car");
                writer.WriteAttributeString("Image", "Ferrari.jpg");
                writer.WriteElementString("Manufactured", "La ...");
                writer.WriteElementString("Model", "Alonso");
                writer.WriteElementString("Year", "1912");
                writer.WriteElementString("Color", "Yellow");
                writer.WriteElementString("Speed", "250");
                writer.WriteEndElement();

                writer.WriteStartElement("Car");
                writer.WriteAttributeString("Image", "Ford.jpg");
                writer.WriteElementString("Manufactured", "Detroit");
                writer.WriteElementString("Model", "Mustang");
                writer.WriteElementString("Year", "2019");
                writer.WriteElementString("Color", "Red");
                writer.WriteElementString("Speed", "240");
                writer.WriteEndElement();

                writer.WriteEndElement();

                writer.WriteEndDocument();

                Console.WriteLine("The file was generated!");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            finally
            {
                if (writer!=null)
                {
                    writer.Close();
                }
            }


            Console.ReadKey();
        }

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

using System;
using System.Xml;
using static System.Console;

namespace SimpleProject
{
    class Program
    {
	static void OutputNode(XmlNode node)
        {
            switch (node.NodeType)
            {
                case XmlNodeType.Element:
                    WriteLine($"Type={node.NodeType}\tName={node.Name}");
                    break;
                case XmlNodeType.Text:
                    WriteLine($"Type={node.NodeType}\tValue={node.Value}");
                    break;
                default:
                    break;
            }

            if (node.Attributes != null)
            {
                foreach (XmlAttribute attr in node.Attributes)
                    WriteLine($"Type= {attr.NodeType}\tName={attr.Name}\tValue={attr.Value}");
            }
            if (node.HasChildNodes)
            {
                foreach (XmlNode child in node.ChildNodes)
                {
                    OutputNode(child);
                }
            }
        }

        static void Main(string[] args)
        {
            try
            {
                XmlDocument doc = new XmlDocument();
                doc.Load("Cars.xml");
                OutputNode(doc.DocumentElement);
            }
            catch (Exception ex)
            {
                WriteLine(ex.Message);
            }
        }
    }
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

using System;
using System.Xml;
using static System.Console;

namespace SimpleProject
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                XmlDocument doc = new XmlDocument();
                doc.Load("Cars.xml");
                
                XmlNode root = doc.DocumentElement;
                // удалить первый элемент Cars
                root.RemoveChild(root.FirstChild); 
                // создать узлы элементов.
                XmlNode bike = doc.CreateElement("Motorcycle");
                XmlNode elem1 = doc.CreateElement("Nanufactured");
                XmlNode elem2 = doc.CreateElement("Model");
                XmlNode elem3 = doc.CreateElement("Year");
                XmlNode elem4 = doc.CreateElement("Color");
                XmlNode elem5 = doc.CreateElement("Engine");
                // создать текстовые узлы
                XmlNode text1 = doc.CreateTextNode("Harley-Davidson Motor Co. Inc.");
                XmlNode text2 = doc.CreateTextNode("Harley 20J");
                XmlNode text3 = doc.CreateTextNode("1920");
                XmlNode text4 = doc.CreateTextNode("Olive");
                XmlNode text5 = doc.CreateTextNode("37 HP");
                // присоединить текстовые узлы к узлам элементов
                elem1.AppendChild(text1);
                elem2.AppendChild(text2);
                elem3.AppendChild(text3);
                elem4.AppendChild(text4);
                elem5.AppendChild(text5);
                // присоединить узлы элементов к узлу bike
                bike.AppendChild(elem1);
                bike.AppendChild(elem2);
                bike.AppendChild(elem3);
                bike.AppendChild(elem4);
                bike.AppendChild(elem5);
                // присоединить узел bike к корневому узлу
                root.AppendChild(bike);

                doc.Save("Motorcycle.xml"); // сохранить измененный документ

                WriteLine("The Motorcycle.xml file is generated!");
            }
            catch (Exception ex)
            {
                WriteLine(ex.Message);
            }
        }
    }
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

using System;
using System.Xml;
using static System.Console;

namespace SimpleProject
{
    class Program
    {
        static void Main(string[] args)
        {
            XmlTextReader reader = null;
            try
            {
                reader = new XmlTextReader("Cars.xml");
                reader.WhitespaceHandling = WhitespaceHandling.None;
                while (reader.Read())
                {
                    WriteLine($"Type={reader.NodeType}\t\tName={reader.Name}\t\tValue={reader.Value}");
                    if (reader.AttributeCount > 0)
                    {
                        while (reader.MoveToNextAttribute())
                        {
                            WriteLine($"Type={reader.NodeType}\tName={reader.Name}\tValue={reader.Value}");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLine(ex.Message);
            }
            finally
            {
                if (reader != null)
                    reader.Close();
            }
        }
    }
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

using System;
using System.Xml;
using static System.Console;

namespace SimpleProject
{
    class Program
    {
        static void Main(string[] args)
        {
            XmlTextReader reader = null;
            try
            {
                reader = new XmlTextReader("Cars.xml");
                reader.WhitespaceHandling = WhitespaceHandling.None;
                while (reader.Read())
                {
                    if (reader.NodeType == XmlNodeType.Element && reader.Name == "Car" && reader.AttributeCount > 0)
                    {
                        while (reader.MoveToNextAttribute())
                        {
                            if (reader.Name == "Image")
                            {
                                WriteLine(reader.Value);
                                break;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLine(ex.Message);
            }
            finally
            {
                if (reader != null)
                    reader.Close();
            }
        }
    }
}
