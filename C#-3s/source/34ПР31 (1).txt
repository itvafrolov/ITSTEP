
    /// <summary>
    /// The <c>Distance</c> class provides methods for converting kilometers to and from miles.
    /// </summary>
    class Distance
    {
        /// <summary>
        /// Converts kilometers to miles.
        /// </summary>
        /// <param name="kilometers">Used to indicate kilometers. A <see cref="double"/> type representing a value.</param>
        /// <exception cref="ArgumentException">
        /// If <paramref name="kilometers"/> is negative.
        /// </exception>
        /// <returns>Returns the distance in miles.</returns>
        public static double KilometersToMiles(double kilometers)
        {
            if (kilometers < 0)
            {
                throw new ArgumentException("The value must be positive.");
            }
            return kilometers * 0.621371;
        }

        /// <summary>
        /// Converts miles to kilometers.
        /// </summary>
        /// <param name="miles">Used to indicate miles. A <see cref="double"/> type representing a value.</param>
        /// <exception cref="ArgumentException">
        /// If <paramref name="miles"/> is negative.
        /// </exception>
        /// <returns>Returns the distance in kilometers.</returns>
        public static double MilesToKilometers(double miles)
        {
            if (miles<0)
            {
                throw new ArgumentException("The value must be positive.");
            }
            return miles * 1.60934;
        }
    }

--------------------------------------------------------------------------------------------------------------------------------

        static void Main(string[] args)
        {
            try
            {
                Console.Write("Input kilometers: ");
                double distance = double.Parse(Console.ReadLine());
                Console.WriteLine($"Miles: {Distance.KilometersToMiles(distance)}");

                Console.Write("Input miles: ");
                distance = double.Parse(Console.ReadLine());
                Console.WriteLine($"Kilometers: {Distance.MilesToKilometers(distance)}");                
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

            Console.ReadKey();
        }

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        static void WriteFile(string filePath)
        {
            FileStream fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write, FileShare.None);
            try
            {
                Console.WriteLine("Input data: ");
                string text = Console.ReadLine();

                byte[] bytes = Encoding.ASCII.GetBytes(text);
                fileStream.Write(bytes, 0, bytes.Length);

                Console.WriteLine("Information recorded!");
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            finally
            {
                fileStream.Close();
            }
        }

        static string ReadFile(string filePath)
        {
            using (FileStream fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read))
            {
                byte[] bytes = new byte[fileStream.Length];
                fileStream.Read(bytes, 0, bytes.Length);

                return Encoding.ASCII.GetString(bytes);
            }
        }

        static void Main(string[] args)
        {
            try
            {
                WriteFile("test.bin");

                Console.WriteLine(ReadFile("test.bin"));
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

            Console.ReadKey();
        }

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++